"use strict";

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function _iterableToArrayLimit(arr, i) { if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === "[object Arguments]")) { return; } var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _wrapNativeSuper(Class) { var _cache = typeof Map === "function" ? new Map() : undefined; _wrapNativeSuper = function _wrapNativeSuper(Class) { if (Class === null || !_isNativeFunction(Class)) return Class; if (typeof Class !== "function") { throw new TypeError("Super expression must either be null or a function"); } if (typeof _cache !== "undefined") { if (_cache.has(Class)) return _cache.get(Class); _cache.set(Class, Wrapper); } function Wrapper() { return _construct(Class, arguments, _getPrototypeOf(this).constructor); } Wrapper.prototype = Object.create(Class.prototype, { constructor: { value: Wrapper, enumerable: false, writable: true, configurable: true } }); return _setPrototypeOf(Wrapper, Class); }; return _wrapNativeSuper(Class); }

function isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

function _construct(Parent, args, Class) { if (isNativeReflectConstruct()) { _construct = Reflect.construct; } else { _construct = function _construct(Parent, args, Class) { var a = [null]; a.push.apply(a, args); var Constructor = Function.bind.apply(Parent, a); var instance = new Constructor(); if (Class) _setPrototypeOf(instance, Class.prototype); return instance; }; } return _construct.apply(null, arguments); }

function _isNativeFunction(fn) { return Function.toString.call(fn).indexOf("[native code]") !== -1; }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.URLTokenBaseHTTPClient = void 0;

var buffer_1 = require("buffer");

var URLTokenBaseHTTPError =
/*#__PURE__*/
function (_Error) {
  _inherits(URLTokenBaseHTTPError, _Error);

  function URLTokenBaseHTTPError(message, response) {
    var _this;

    _classCallCheck(this, URLTokenBaseHTTPError);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(URLTokenBaseHTTPError).call(this, message));
    _this.response = response;
    _this.name = 'URLTokenBaseHTTPError';
    _this.response = response;
    return _this;
  }

  return URLTokenBaseHTTPError;
}(_wrapNativeSuper(Error));

var fetch = require("node-fetch");
/**
 * Implementation of BaseHTTPClient that uses a URL and a token
 * and make the REST queries using fetch.
 * This is the default implementation of BaseHTTPClient.
 */


var URLTokenBaseHTTPClient =
/*#__PURE__*/
function () {
  function URLTokenBaseHTTPClient(tokenHeader, baseServer, port) {
    var defaultHeaders = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};

    _classCallCheck(this, URLTokenBaseHTTPClient);

    this.defaultHeaders = defaultHeaders; // Append a trailing slash so we can use relative paths. Without the trailing
    // slash, the last path segment will be replaced by the relative path. See
    // usage in `addressWithPath`.

    var fixedBaseServer = baseServer.endsWith('/') ? baseServer : "".concat(baseServer, "/");
    var baseServerURL = new URL(fixedBaseServer);

    if (typeof port !== 'undefined') {
      baseServerURL.port = port.toString();
    }

    if (baseServerURL.protocol.length === 0) {
      throw new Error('Invalid base server URL, protocol must be defined.');
    }

    this.baseURL = baseServerURL;
    this.tokenHeader = tokenHeader;
  }
  /**
   * Compute the URL for a path relative to the instance's address
   * @param relativePath - A path string
   * @param query - An optional key-value object of query parameters to add to the URL. If the
   *   relativePath already has query parameters on it, the additional parameters defined here will
   *   be added to the URL without modifying those (unless a key collision occurs).
   * @returns A URL string
   */


  _createClass(URLTokenBaseHTTPClient, [{
    key: "getURL",
    value: function getURL(relativePath, query) {
      var fixedRelativePath;

      if (relativePath.startsWith('./')) {
        fixedRelativePath = relativePath;
      } else if (relativePath.startsWith('/')) {
        fixedRelativePath = ".".concat(relativePath);
      } else {
        fixedRelativePath = "./".concat(relativePath);
      }

      var address = new URL(fixedRelativePath, this.baseURL);

      if (query) {
        for (var _i = 0, _Object$entries = Object.entries(query); _i < _Object$entries.length; _i++) {
          var _Object$entries$_i = _slicedToArray(_Object$entries[_i], 2),
              key = _Object$entries$_i[0],
              value = _Object$entries$_i[1];

          address.searchParams.set(key, value);
        }
      }

      return address.toString();
    }
  }, {
    key: "get",
    value: function get(relativePath, query) {
      var requestHeaders,
          headers,
          res,
          _args = arguments;
      return regeneratorRuntime.async(function get$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              requestHeaders = _args.length > 2 && _args[2] !== undefined ? _args[2] : {};
              // Expand headers for use in fetch
              headers = _objectSpread({}, this.tokenHeader, {}, this.defaultHeaders, {}, requestHeaders);
              _context.next = 4;
              return regeneratorRuntime.awrap(fetch(this.getURL(relativePath, query), {
                headers: headers
              }));

            case 4:
              res = _context.sent;
              return _context.abrupt("return", URLTokenBaseHTTPClient.formatFetchResponse(res));

            case 6:
            case "end":
              return _context.stop();
          }
        }
      }, null, this);
    }
  }, {
    key: "post",
    value: function post(relativePath, data, query) {
      var requestHeaders,
          headers,
          res,
          _args2 = arguments;
      return regeneratorRuntime.async(function post$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              requestHeaders = _args2.length > 3 && _args2[3] !== undefined ? _args2[3] : {};
              // Expand headers for use in fetch
              headers = _objectSpread({}, this.tokenHeader, {}, this.defaultHeaders, {}, requestHeaders);
              _context2.next = 4;
              return regeneratorRuntime.awrap(fetch(this.getURL(relativePath, query), {
                method: 'POST',
                body: data,
                headers: headers
              }));

            case 4:
              res = _context2.sent;
              return _context2.abrupt("return", URLTokenBaseHTTPClient.formatFetchResponse(res));

            case 6:
            case "end":
              return _context2.stop();
          }
        }
      }, null, this);
    }
  }, {
    key: "delete",
    value: function _delete(relativePath, data, query) {
      var requestHeaders,
          headers,
          res,
          _args3 = arguments;
      return regeneratorRuntime.async(function _delete$(_context3) {
        while (1) {
          switch (_context3.prev = _context3.next) {
            case 0:
              requestHeaders = _args3.length > 3 && _args3[3] !== undefined ? _args3[3] : {};
              // Expand headers for use in fetch
              headers = _objectSpread({}, this.tokenHeader, {}, this.defaultHeaders, {}, requestHeaders);
              _context3.next = 4;
              return regeneratorRuntime.awrap(fetch(this.getURL(relativePath, query), {
                method: 'DELETE',
                body: data,
                headers: headers
              }));

            case 4:
              res = _context3.sent;
              return _context3.abrupt("return", URLTokenBaseHTTPClient.formatFetchResponse(res));

            case 6:
            case "end":
              return _context3.stop();
          }
        }
      }, null, this);
    }
  }], [{
    key: "formatFetchResponseHeaders",
    value: function formatFetchResponseHeaders(headers) {
      var headersObj = {};
      headers.forEach(function (key, value) {
        headersObj[key] = value;
      });
      return headersObj;
    }
  }, {
    key: "checkHttpError",
    value: function checkHttpError(res) {
      var body, bodyErrorMessage, decoded, message;
      return regeneratorRuntime.async(function checkHttpError$(_context4) {
        while (1) {
          switch (_context4.prev = _context4.next) {
            case 0:
              if (!res.ok) {
                _context4.next = 2;
                break;
              }

              return _context4.abrupt("return");

            case 2:
              body = null;
              bodyErrorMessage = null;
              _context4.prev = 4;
              _context4.t0 = Uint8Array;
              _context4.next = 8;
              return regeneratorRuntime.awrap(res.arrayBuffer());

            case 8:
              _context4.t1 = _context4.sent;
              body = new _context4.t0(_context4.t1);
              decoded = JSON.parse(buffer_1.Buffer.from(body).toString());

              if (decoded.message) {
                bodyErrorMessage = decoded.message;
              }

              _context4.next = 16;
              break;

            case 14:
              _context4.prev = 14;
              _context4.t2 = _context4["catch"](4);

            case 16:
              message = "Network request error. Received status ".concat(res.status, " (").concat(res.statusText, ")");

              if (bodyErrorMessage) {
                message += ": ".concat(bodyErrorMessage);
              }

              throw new URLTokenBaseHTTPError(message, {
                body: body,
                status: res.status,
                headers: URLTokenBaseHTTPClient.formatFetchResponseHeaders(res.headers)
              });

            case 19:
            case "end":
              return _context4.stop();
          }
        }
      }, null, null, [[4, 14]]);
    }
  }, {
    key: "formatFetchResponse",
    value: function formatFetchResponse(res) {
      return regeneratorRuntime.async(function formatFetchResponse$(_context5) {
        while (1) {
          switch (_context5.prev = _context5.next) {
            case 0:
              _context5.next = 2;
              return regeneratorRuntime.awrap(this.checkHttpError(res));

            case 2:
              _context5.t0 = Uint8Array;
              _context5.next = 5;
              return regeneratorRuntime.awrap(res.arrayBuffer());

            case 5:
              _context5.t1 = _context5.sent;
              _context5.t2 = new _context5.t0(_context5.t1);
              _context5.t3 = res.status;
              _context5.t4 = URLTokenBaseHTTPClient.formatFetchResponseHeaders(res.headers);
              return _context5.abrupt("return", {
                body: _context5.t2,
                status: _context5.t3,
                headers: _context5.t4
              });

            case 10:
            case "end":
              return _context5.stop();
          }
        }
      }, null, this);
    }
  }]);

  return URLTokenBaseHTTPClient;
}();

exports.URLTokenBaseHTTPClient = URLTokenBaseHTTPClient;